name: Yarn upgrade

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, vite, vite-session ]
  schedule:
  - cron: '0 10 * 1-12 6'
  workflow_dispatch:
    inputs:
      log:
        description: "Workflow run description"
        required: false
        default: "Upgrade dependencies"
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  dependencies-upgrade:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'update/yarn-upgrade'
      - uses: actions/setup-node@v3
        with:
          node-version: 'latest'
      - name: 'Install Yarn'
        run: 'npm i -g yarn'
      - name: 'Dependencies upgrade'    
        run: 'yarn upgrade'
      - name: 'Git setup'
        run: 'git config --global user.name "GitHub Actions Bot" && git config --global user.email "<>"'
      - name: 'Stage changes'
        run: 'git add package.json yarn.lock'
      - name: 'Commit changes'
        run: 'git commit -m "Dependencies upgrade :arrow_up:"'
      - name: 'Push changes'
        run: 'git push origin update/yarn-upgrade'
 
  merge-master-branch:
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'update/yarn-upgrade'
          fetch-depth: 0
      - uses: actions/checkout@v3
        with:
          ref: 'master'
          fetch-depth: 0
      - name: 'Git setup'
        run: 'git config --global user.name "GitHub Actions Bot" && git config --global user.email "<>"'
      - name: 'Merge "update/yarn-upgrade" onto "master"'
        run: 'git merge origin/update/yarn-upgrade'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'master'
          fetch-depth: 0
      - name: 'Git setup'
        run: 'git config --global user.name "GitHub Actions Bot" && git config --global user.email "<>"'
      - name: 'Create release'
        run: |
              LATEST_TAG=`git describe --abbrev=0 --tags`
              LATEST_TAG_ARRAY=(${LATEST_TAG//./ })
              
              VNUM1=${LATEST_TAG_ARRAY[0]}
              VNUM2=${LATEST_TAG_ARRAY[1]}
              VNUM3=${LATEST_TAG_ARRAY[2]}
              VNUM3=$((VNUM3+1))
              NEW_TAG="$VNUM1.$VNUM2.$VNUM3"
              
              echo "Updating $LATEST_TAG to $NEW_TAG"
              
              GIT_COMMIT=`git rev-parse HEAD`
              NEEDS_TAG=`git describe --contains $GIT_COMMIT 2>/dev/null`
              
              if [ -z "$NEEDS_TAG" ]; then
                git tag -a $NEW_TAG -m "Dependencies upgrade"
                echo "Tagged with $NEW_TAG"
                git push origin master --tags
                
                gh release create v$NEW_TAG \
                --latest \
                --target=master \
                --generate-notes
                -t "v$NEW_TAG - Dependencies upgrade"
                
              else
                echo "Already a tag on this commit"
              fi            
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
